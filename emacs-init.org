#+TITLE: Emacs Init
#+AUTHOR: Jonathan Lai

* Emacs Init as an Org file

** My Emacs setup
Lets make this organized and documented org-mode style

** init-basics
Here lets do the preliminary setup and put in some good defaults for emacs, including setting some system wide variables.

#+BEGIN_SRC emacs-lisp

(require 'package)
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("gnu" . "http://elpa.gnu.org/packages/")
                         ;; ("popkit" . "https://elpa.popkit.org/packages/") ;; in case melpa goes down, have this backup mirror

                         ;; ("org" . "http://orgmode.org/elpa/")
                         ;; uncomment the below line if an elpa is down (e.g. melpa.org)
                         ;; it will install elpa packages from the "backup-elpa", the local backup
                         ;; ("backup-elpa" . "~/.emacs.d/.backup-elpa/")
))

(add-to-list 'load-path "~/.emacs.d/el-get/el-get")

(unless (require 'el-get nil 'noerror)
  (require 'package)
  (package-refresh-contents)
  ;;(package-initialize)
  (eval-when-compile (package-initialize))
  (package-install 'el-get)
  (require 'el-get))

(add-to-list 'el-get-recipe-path "~/.emacs.d/el-get/el-get/recipes")
(el-get 'sync)

;;(eval-when-compile (package-initialize))

(if (not (package-installed-p 'req-package))
  (progn
    (package-refresh-contents)
    (package-install 'req-package)))

(require 'req-package)
;; (setq req-package-always-ensure t)

;;(eval-when-compile (package-initialize))
;; el-get
;;(req-package el-get ;; prepare el-get (optional)
;;  :force t ;; load package immediately, no dependency resolution
;;  :config
;;  (add-to-list 'el-get-recipe-path "~/.emacs.d/el-get/el-get/recipes")
;;  (el-get 'sync))

(let ((default-directory "~/.emacs.d/custom/"))
  (normal-top-level-add-to-load-path '("."))
  (normal-top-level-add-subdirs-to-load-path))

(require 'dired-x)
(require 'cross-platform-copy-paste)

;; http://stackoverflow.com/questions/1480572/how-to-have-emacs-auto-refresh-all-buffers-when-files-have-changed-on-disk
(global-auto-revert-mode t)

(defcustom dotemacs-cache-directory (concat user-emacs-directory ".cache/")
  "The storage location for various persistent files.")

;; Backup Files location
;; https://github.com/bling/dotemacs/blob/master/config/init-core.el
(setq backup-directory-alist
      `((".*" . ,(concat dotemacs-cache-directory "backups")))
      auto-save-file-name-transforms
      `((".*" ,(concat dotemacs-cache-directory "backups") t))
      auto-save-list-file-prefix
      (concat dotemacs-cache-directory "auto-save-list/saves-"))

(setq custom-file (concat user-emacs-directory "custom/custom.el"))

(req-package esup :loader :el-get)

(setq recentf-save-file (concat dotemacs-cache-directory "recentf"))

(req-package f :loader :el-get
  :require f
  :config
    (unless (f-exists? dotemacs-cache-directory)
      (f-mkdir dotemacs-cache-directory))
    ;;(unless (f-exists? custom-file)
    ;;  (f-touch custom-file))
    (unless (f-exists? recentf-save-file)
      (f-touch recentf-save-file)
      (req-package s) ;; this should already be installed -- f.el has this as a dependency
      (setq spacer-readme (s-concat (f-full user-emacs-directory) "README.md" )) ;; => /home/path/to/file
      (setq spacer-recentf (s-concat "(setq recentf-list '(\"" spacer-readme "\")) (setq recentf-filter-changer-current 'nil)"))
      (f-write spacer-recentf 'utf-8 recentf-save-file))
    )

;; https://github.com/kiwanami/emacs-deferred
(req-package deferred :loader :el-get)

;; SPU - Emacs Silent Package Upgrader
(req-package spu :loader :elpa
  :config
  (progn
    (setq spu-log-path (concat dotemacs-cache-directory "spu_log/"))))

;; https://github.com/redguardtoo/elpa-mirror
;; For if/when melpa goes down, prepare for a backup
;; Use `M-x elpamr-create-mirror-for-installed` to create a local repository.
(req-package elpa-mirror :loader :elpa
  :config
  (progn
    (setq dotemacs-backup-elpa-directory (concat user-emacs-directory ".backup-elpa/"))
    (setq elpamr-default-output-directory dotemacs-backup-elpa-directory)
    (unless (f-exists? dotemacs-backup-elpa-directory)
      (f-mkdir dotemacs-backup-elpa-directory))))

(req-package undo-tree :loader :el-get
  :config
  (progn
    (global-undo-tree-mode t)))

;; Dont display logo at startup
(setq inhibit-startup-message t)

;; How do I change the scratch message in Emacs?
;; http://stackoverflow.com/a/1498292/2741455
(setq initial-scratch-message ";; This is the Emacs Scratch Buffer")

(defalias 'yes-or-no-p 'y-or-n-p)

;; Don't automatically add newline to end of file
(setq mode-require-final-newline nil)

;; (setq recentf-save-file (concat dotemacs-cache-directory "recentf"))
;; 
;; (unless (f-exists? recentf-save-file)
;;     (f-touch recentf-save-file)
;;     (req-package s) ;; this should already be installed -- f.el has this as a dependency
;;     (setq spacer-readme (s-concat (f-full user-emacs-directory) "README.md" )) ;; => /home/path/to/file
;;     (setq spacer-recentf (s-concat "(setq recentf-list '(\"" spacer-readme "\")) (setq recentf-filter-changer-current 'nil)"))
;;     (f-write spacer-recentf 'utf-8 recentf-save-file))

;; (if (not (f-exists? recentf-save-file))
;;     (f-touch recentf-save-file)
;;     (req-package s) ;; this should already be installed -- f.el has this as a dependency
;;     (setq spacer-readme (s-concat (f-full user-emacs-directory) "README.md" )) ;; => /home/path/to/file
;;     (setq spacer-recentf (s-concat "(setq recentf-list '(\"" spacer-readme "\")) (setq recentf-filter-changer-current 'nil)"))
;;     (f-write spacer-recentf 'utf-8 recentf-save-file))
(setq recentf-max-menu-items 10)
(setq recentf-auto-cleanup 'never)
(recentf-mode 1)

(setq-default tab-width 2)
(setq-default indent-tabs-mode nil) ;; seems to affect autocomplete modes

(setq visible-bell 1)
(menu-bar-mode -1)

;; recentf hook for when a file is not opened, but just a scratch buffer, then load recentf
;; (defun recentf-open-files-hook ()
;;   ;;(if (not (f-this-file))
;;   ;;  (recentf-open-files))
;;   (if (eq (buffer-file-name) nil)
;;     (recentf-open-files)))

;; (add-hook 'emacs-startup-hook 'recentf-open-files-hook)

;; Closing all other buffers in Emacs
;; http://stackoverflow.com/a/3417473/2741455
(defun kill-other-buffers ()
  "Kill all other buffers."
  (interactive)
  (mapc 'kill-buffer
    (delq (current-buffer)
      (remove-if-not 'buffer-file-name (buffer-list)))))

;; http://stackoverflow.com/questions/5052088/what-is-custom-set-variables-and-faces-in-my-emacs
;; http://emacsblog.org/2008/12/06/quick-tip-detaching-the-custom-file/
;;(setq custom-file "~/.emacs.d/custom/custom.el")
(load custom-file 'noerror)

(setq tramp-default-method "ssh")

#+END_SRC

** init-aesthetics
Lets make emacs look and behave better.

#+BEGIN_SRC emacs-lisp
(line-number-mode t)
(column-number-mode t)
(global-linum-mode t)

(req-package smartparens :loader :el-get
  :config
  (progn
    (require 'smartparens-config)
    (smartparens-global-mode 1)))

(req-package whitespace :loader :el-get
  :config
  (progn
    (setq whitespace-style (quote (spaces tabs newline space-mark tab-mark newline-mark)))
    (setq whitespace-display-mappings
      '((space-mark 32 [183] [46])
        (tab-mark 9 [9655 9] [92 9])))))

(req-package ethan-wspace :loader :el-get)

(req-package color-theme-sanityinc-tomorrow :loader :elpa
  ;; :functions color-theme-install
  ;; https://github.com/basille/.emacs.d/blob/master/init.el
  :init (load-theme 'sanityinc-tomorrow-eighties t))

;; (req-package apropospriate-theme
;; :defer t
;; :init (load-theme 'apropospriate-dark t)) ;; issues with this one, but nice for html-mode

;;(req-package zenburn-theme)
;;
;;(req-package spacemacs-theme
;;  :defer t
;;  :init
;;  (progn
;;    (load-theme 'spacemacs-dark t)))


#+END_SRC

** init-navigation
Gotta navigate around emacs more efficiently, and this is how.

#+BEGIN_SRC emacs-lisp

(req-package counsel :loader :elpa)
(req-package ivy :loader :elpa
  :ensure smex ;; http://emacs.stackexchange.com/questions/17710/req-package-with-config-to-set-variables
  :config
  (progn
    (setq smex-save-file (concat dotemacs-cache-directory "smex-items")) ;; retain smex for the sort by most recent / frequently used commands
    (ivy-mode 1)
    (global-set-key (kbd "M-x") 'counsel-M-x) ;; when in Emacs keybindings
    (setq ivy-height 14) ;; number of result lines to display
    ;; (setq ivy-initial-inputs-alist nil) ;; no regexp by default
    (setq ivy-re-builders-alist
      '((t . ivy--regex-fuzzy)))))

;; https://manuel-uberti.github.io/emacs/2016/09/17/validate/
(req-package validate :loader :elpa)

;; https://github.com/krobertson/emacs.d/blob/master/packages.el
(req-package projectile :loader :el-get
  :config
  (progn
    (projectile-global-mode 1)
    ;;https://github.com/lunaryorn/.emacs.d/blob/master/init.el
    ;;(validate-setq projectile-completion-system 'ivy
    ;;  projectile-find-dir-includes-top-level t)
    (setq projectile-completion-system 'ivy))
  :init
  (progn
    (setq projectile-known-projects-file (concat dotemacs-cache-directory "projectile-bookmarks.eld"))
    (setq projectile-require-project-root nil)))

(req-package page-break-lines :loader :elpa)
(req-package dashboard :loader :elpa
  :config
  (progn
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents  . 10)
                            (projects . 5)))))

(req-package ace-jump-mode :loader :el-get
  :config
  (progn
    (define-key global-map (kbd "C-c SPC") 'ace-jump-mode)))

(req-package saveplace :loader :el-get
  :config
  (progn
    (setq-default save-place t)
    (setq save-place-forget-unreadable-files nil)
    ;; Try to make emacsclient play nice with saveplace
    ;; http://www.emacswiki.org/emacs/EmacsClient#toc35
    (setq server-visit-hook (quote (save-place-find-file-hook)))
    ;; rename this save file....
    (setq save-place-file "~/.emacs.d/.cache/saved-places")))

#+END_SRC

** init-coding
Here we're going to make emacs a great coding environment.

#+BEGIN_SRC emacs-lisp
;; enable seeing of git diffs
;; got git-gutter working properly with req-package
;; https://github.com/hlissner/emacs.d/blob/master/init/init-git.el
(req-package git-gutter :loader :el-get
  :diminish git-gutter-mode
  :config
  (progn
    (global-git-gutter-mode 1)))

(req-package git-timemachine :loader :el-get)

(req-package magit :loader :el-get
  :config
  (progn
    ;; http://whattheemacsd.com/setup-magit.el-01.html
    ;; http://www.lunaryorn.com/posts/fullscreen-magit-status.html
    (defalias 'gst 'magit-status)
    (defalias 'st 'magit-status)
    (defadvice magit-status (around magit-fullscreen activate)
      (window-configuration-to-register :magit-fullscreen)
      ad-do-it
      (delete-other-windows))
    (defun magit-quit-session ()
      "Restores the previous window configuration and kills the magit buffer"
      (interactive)
      (kill-buffer)
      (jump-to-register :magit-fullscreen))))

(req-package web-mode :loader :el-get
  :config
  (progn
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.gsp?\\'" . web-mode))))

(req-package js2-mode :loader :el-get
  :config
  (progn
    (add-to-list 'auto-mode-alist '("\\.js?\\'" . js2-mode))))

;; https://github.com/jcf/emacs.d/blob/master/init-languages.org
;; (req-package css-mode
;;   :loader :elpa
;;   :commands css-mode
;;   :init
;;   (setq css-indent-offset 2)
;;   :config
;;   (req-package rainbow-mode
;;     :pin gnu ;; uses gnu and not melpa for its repo
;;     :init
;;     (dolist (hook '(css-mode-hook html-mode-hook))
;;       (add-hook hook 'rainbow-mode))))

;; https://github.com/yasuyk/web-beautify
;; js-beautify installed by typing: npm -g install js-beautify
(when (executable-find "js-beautify")
  (req-package web-beautify :loader :el-get ))

(req-package groovy-mode :loader :el-get
  :config
  (progn
    (autoload 'groovy-mode "groovy-mode" "Major mode for editing Groovy code." t)
    (add-to-list 'auto-mode-alist '("\.groovy$" . groovy-mode))
    (add-to-list 'auto-mode-alist '("\.gradle$" . groovy-mode))
    (add-to-list 'interpreter-mode-alist '("groovy" . groovy-mode))))

(req-package lua-mode :loader :el-get
  :config
  (progn
    (add-to-list 'auto-mode-alist '("\\.lua?\\'" . js2-mode))))

(req-package vimrc-mode :loader :el-get
  :config
  (progn
    (add-to-list 'auto-mode-alist '(".vim\\(rc\\)?$" . vimrc-mode))))

(req-package drag-stuff :loader :el-get
  :config
  (progn
    (drag-stuff-global-mode t)))

;; http://stackoverflow.com/a/15310340/2741455
;; How to set defcustom variable
(req-package linum-relative :loader :el-get
  :config
  (progn
    (setq linum-relative-format "%3s ")
    (setq linum-relative-current-symbol "")))

(cond ((executable-find "pt")
        (progn
          (req-package pt :loader :elpa ) ;; https://github.com/bling/pt.el
          (defalias 'my-search-util 'projectile-pt)))  ;; seems pretty fast (faster than ag? maybe...dunno), but it's written in Go!
      ((executable-find "ag")
        (progn
          (req-package ag :loader :el-get ) ;; https://github.com/Wilfred/ag.el
          (defalias 'my-search-util 'projectile-ag)))  ;; on the website, it said faster than ack
      ((executable-find "grep")
        (progn
          (defalias 'my-search-util 'projectile-grep))))

#+END_SRC

** init-evil
Lets add the awesome vim/modal editing keybindings. So much more fluid to edit with than emacs own.

#+BEGIN_SRC emacs-lisp

(req-package emacs-neotree :loader :el-get
  :require evil
  :config
  (progn
    (setq-default neo-show-hidden-files t)

    ;; from https://github.com/kaushalmodi/.emacs.d/blob/master/setup-files/setup-neotree.el
    (setq neo-theme 'nerd) ; 'classic, 'nerd, 'ascii, 'arrow
    (setq neo-vc-integration '(face char))
    ;; Patch to fix vc integration
    (defun neo-vc-for-node (node)
      (let* ((backend (vc-backend node))
             (vc-state (when backend (vc-state node backend))))
        ;; (message "%s %s %s" node backend vc-state)
        (cons (cdr (assoc vc-state neo-vc-state-char-alist))
              (cl-case vc-state
                (up-to-date       neo-vc-up-to-date-face)
                (edited           neo-vc-edited-face)
                (needs-update     neo-vc-needs-update-face)
                (needs-merge      neo-vc-needs-merge-face)
                (unlocked-changes neo-vc-unlocked-changes-face)
                (added            neo-vc-added-face)
                (removed          neo-vc-removed-face)
                (conflict         neo-vc-conflict-face)
                (missing          neo-vc-missing-face)
                (ignored          neo-vc-ignored-face)
                (unregistered     neo-vc-unregistered-face)
                (user             neo-vc-user-face)
                (t                neo-vc-default-face)))))
    ;; from https://github.com/kaushalmodi/.emacs.d/blob/master/setup-files/setup-neotree.el

    ;; from https://github.com/andrewmcveigh/emacs.d
    ;; get keybindings to work better in neotree with evil
    (defun neotree-copy-file ()
      (interactive)
      (let* ((current-path (neo-buffer--get-filename-current-line))
             (msg (format "Copy [%s] to: "
                          (neo-path--file-short-name current-path)))
             (to-path (read-file-name msg (file-name-directory current-path))))
        (dired-copy-file current-path to-path t))
      (neo-buffer--refresh t))
    (define-minor-mode neotree-evil
      "Use NERDTree bindings on neotree."
      :lighter " NT"
      :keymap (progn
                (evil-make-overriding-map neotree-mode-map 'normal t)
                (evil-define-key 'normal neotree-mode-map
                  "C" 'neotree-change-root
                  "U" 'neotree-select-up-node
                  "r" 'neotree-refresh
                  "o" 'neotree-enter
                  (kbd "<return>") 'neotree-enter
                  "i" 'neotree-enter-horizontal-split
                  "s" 'neotree-enter-vertical-split
                  "n" 'evil-search-next
                  "N" 'evil-search-previous
                  "ma" 'neotree-create-node
                  "mc" 'neotree-copy-file
                  "md" 'neotree-delete-node
                  "mm" 'neotree-rename-node
                  "gg" 'evil-goto-first-line)
                neotree-mode-map))))

(req-package evil-nerd-commenter :loader :el-get
  :require evil
  :commands (evilnc-comment-or-uncomment-lines)
  :config
  (progn
    (evilnc-default-hotkeys)))

(req-package evil-matchit :loader :el-get
  :require evil
  :config
  (progn
    (global-evil-matchit-mode 1)))

(req-package evil-surround :loader :el-get
  :require evil
  :config
  (progn
    (global-evil-surround-mode 1)))

(req-package evil-visualstar :loader :el-get
  :require evil
  :config
  (progn
    (global-evil-visualstar-mode)))

(req-package evil-quickscope :loader :el-get
  :require evil
  :config
  (progn
    (global-evil-quickscope-mode 1)))

(req-package evil-numbers :loader :el-get
  :require evil
  :config
  (progn
    (define-key evil-normal-state-map (kbd "C-<right>") 'evil-numbers/inc-at-pt)
    (define-key evil-normal-state-map (kbd "C-<left>") 'evil-numbers/dec-at-pt)))

(req-package spaceline :loader :el-get
  :config
  (progn
    (require 'spaceline-config)
    (spaceline-spacemacs-theme)))

(req-package key-chord :loader :el-get
  :require evil
  :config
  (progn
    (key-chord-mode 1)
    (key-chord-define evil-insert-state-map "kj" 'evil-normal-state)))

(req-package evil-leader :loader :el-get
  :require evil
  :config
  (progn
    (global-evil-leader-mode t)
    (evil-leader/set-leader ",")
    (evil-leader/set-key
      "a" 'ace-jump-mode
      "b" 'ivy-switch-buffer
      "e" 'eval-region
      "f" 'my-search-util
      "l" 'linum-relative-toggle
      "k"  'kill-other-buffers
      "nf" 'neotree-find
      "nt" 'neotree-toggle
      "p" 'projectile-find-file
      "r" 'counsel-recentf
      "/" 'evilnc-comment-or-uncomment-lines
      "<down>" 'drag-stuff-down
      "<up>" 'drag-stuff-up)))

(req-package goto-chg :loader :el-get)

;; evil mode setup ;;;
(setq evil-want-C-u-scroll t)
(setq evil-want-C-w-in-emacs-state t)
(setq evil-default-cursor t)
(req-package evil 
  :loader :el-get
  :config
  (progn
    (evil-mode 1)
    (define-key evil-normal-state-map ";" 'evil-ex)
    (define-key evil-normal-state-map ":" 'counsel-M-x)

    ;; for use in counsel-M-x / smex
    (defalias 'w 'evil-write)
    (defalias 'wq 'evil-save-and-close)
    (defalias 'wq! 'evil-save-and-close)
    (defalias 'q 'evil-quit)
    (defalias 'q! 'evil-quit)

    (evil-set-initial-state 'magit-status-mode 'emacs)
    (evil-set-initial-state 'magit-log-edit-mode 'emacs)
    (evil-set-initial-state 'dashboard-mode 'emacs)

    (define-key evil-normal-state-map (kbd "C-<down>") 'drag-stuff-down)
    (define-key evil-normal-state-map (kbd "C-<up>") 'drag-stuff-up)

    (define-key evil-motion-state-map "j" 'evil-next-visual-line)
    (define-key evil-motion-state-map "k" 'evil-previous-visual-line)

    ;; https://stackoverflow.com/questions/20882935/how-to-move-between-visual-lines-and-move-past-newline-in-evil-mode
    ;; Make horizontal movement cross lines
    (setq-default evil-cross-lines t)

    (define-key evil-normal-state-map (kbd "C-w ]") 'evil-window-rotate-downwards)
    (define-key evil-normal-state-map (kbd "C-w [") 'evil-window-rotate-upwards)

    (define-key evil-normal-state-map (kbd "C-h")   'evil-window-left)
    (define-key evil-normal-state-map (kbd "C-j")   'evil-window-down)
    (define-key evil-normal-state-map (kbd "C-k")   'evil-window-up)
    (define-key evil-normal-state-map (kbd "C-l")   'evil-window-right)

    (evil-ex-define-cmd "Q"  'evil-quit)
    (evil-ex-define-cmd "Qa" 'evil-quit-all)
    (evil-ex-define-cmd "QA" 'evil-quit-all)

    ;; setup extra keybindings ;;
    ;; Bind DEL and = keys to scrolling up and down
    ;; https://stackoverflow.com/questions/8483182/evil-mode-best-practice
    (define-key evil-normal-state-map (kbd "DEL") (lambda ()
      (interactive)
      (previous-line 10)
      (evil-scroll-line-up 10)))

    (define-key evil-normal-state-map (kbd "=") (lambda ()
      (interactive)
      (next-line 10)
      (evil-scroll-line-down 10)))

))

#+END_SRC

** init-last-minute-touches
Here are some last minute touches. Run silent package upgrader and elpa-mirror towards the end of this init file, because by then req-package will have installed all packages of interest into the ~/.emacs.d/elpa directory. After all packages are there, then is the proper time to backup them.

#+BEGIN_SRC emacs-lisp

;; https://github.com/kiwanami/emacs-deferred
;; (deferred:$
;;   (deferred:wait (* 30 1000)) ;; 30 sec
;;   (deferred:nextc it
;;     (lambda ()
;;       (spu-package-upgrade)
;;       (message "[SPU] Emacs Silent Package Upgrader completed." )))
;;   (deferred:wait (* 120 1000)) ;; 120 sec
;;   (deferred:nextc it
;;     (lambda ()
;;       (elpamr-create-mirror-for-installed)
;;       (message "Elpa packages backed up to ~/.emacs.d/.backup-elpa/" ))))

(setq warning-minimum-level :emergency)
(req-package-finish)

#+END_SRC
